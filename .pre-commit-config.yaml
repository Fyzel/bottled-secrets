repos:
  # General code quality hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-json
      - id: check-merge-conflict
      - id: check-shebang-scripts-are-executable
      - id: check-symlinks
      - id: check-toml
      - id: check-xml
      - id: check-yaml
      - id: debug-statements
      - id: destroyed-symlinks
      - id: detect-private-key  # Built-in private key detection
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-added-large-files
        args: ['--maxkb=1024']
      - id: no-commit-to-branch

  # Secret detection - primary comprehensive tool
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: ^(package\.lock\.json|\.pre-commit-config\.yaml)$

  # Python upgrades
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.16.0
    hooks:
      - id: pyupgrade
        args: [ --py36-plus ]

  # Python formatting
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        language_version: python3

  # Security linting for Python
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.0
    hooks:
      - id: bandit
        args: ['-r', '.']
        exclude: tests/

  # Additional secret pattern detection
  - repo: local
    hooks:
      - id: check-secrets-patterns
        name: Check for hardcoded secrets
        entry: python
        language: system
        args:
          - -c
          - |
            import re
            import sys

            # Common secret patterns
            secret_patterns = [
                (r'password\s*[=:]\s*["\'][^"\']{8,}["\']', 'hardcoded password'),
                (r'secret\s*[=:]\s*["\'][^"\']{8,}["\']', 'hardcoded secret'),
                (r'api[_-]?key\s*[=:]\s*["\'][^"\']{8,}["\']', 'API key'),
                (r'private[_-]?key\s*[=:]\s*["\'][^"\']{8,}["\']', 'private key'),
                (r'access[_-]?token\s*[=:]\s*["\'][^"\']{8,}["\']', 'access token'),
                (r'SECRET_KEY\s*[=:]\s*["\'][^"\']{8,}["\']', 'Flask secret key'),
                (r'DATABASE_URL\s*[=:]\s*["\']postgresql://[^"\']+["\']', 'database URL with credentials'),
                (r'aws[_-]?access[_-]?key[_-]?id\s*[=:]\s*["\'][^"\']{16,}["\']', 'AWS access key'),
                (r'aws[_-]?secret[_-]?access[_-]?key\s*[=:]\s*["\'][^"\']{32,}["\']', 'AWS secret key'),
                (r'mongodb://[^:]+:[^@]+@', 'MongoDB connection string with credentials'),
                (r'mysql://[^:]+:[^@]+@', 'MySQL connection string with credentials'),
                (r'redis://[^:]+:[^@]+@', 'Redis connection string with credentials'),
            ]

            violations_found = False
            for filename in sys.argv[1:]:
                try:
                    with open(filename, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        for pattern, description in secret_patterns:
                            matches = re.finditer(pattern, content, re.IGNORECASE | re.MULTILINE)
                            for match in matches:
                                line_num = content[:match.start()].count('\n') + 1
                                print(f"üö® SECURITY VIOLATION: {description} detected in {filename}:{line_num}")
                                print(f"   Pattern: {match.group()[:50]}...")
                                violations_found = True
                except Exception:
                    continue

            if violations_found:
                print("\n‚ùå Pre-commit blocked: Potential secrets detected!")
                print("üí° Move secrets to environment variables or .env files")
                sys.exit(1)
        files: \.(py|yaml|yml|json|env|conf|config|ini|txt)$
        exclude: ^(\.env\.example|\.secrets\.baseline|\.pre-commit-config\.yaml|requirements.*\.txt)$
